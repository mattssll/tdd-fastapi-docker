# export some variables
export ENVIRONMENT=dev
export TESTING=0
export DATABASE_URL=postgres://postgres:postgres@localhost:5432/web_dev
export DATABASE_TEST_URL=postgres://postgres:postgres@localhost:5432/web_test

# prepare to run docker for the first time
chmod +x project/entrypoint.sh
docker-compose up -d --build
docker-compose logs web

# access db with psql
docker-compose exec web-db psql -U postgres
# connect to db
\c web_dev
\q
# check tables
\dt

# set Aerich (migration tool similar to alembic)
docker-compose exec web aerich init -t app.orm_config.TORTOISE_ORM
# create first migration
docker-compose exec web aerich init-db
# import commands for migration:
aerich downgrade
aerich history
# to apply the migration (create tables in case they were deleted)
aerich upgrade
docker-compose exec web aerich upgrade

# create tables with python instead of Aerich
docker-compose exec web python app/db.py

# run tests with docker
docker-compose exec web python -m pytest
# run specific tests (string parsing let's say)
docker-compose exec web python -m pytest -k get
docker-compose exec web python -m pytest -k ping
# more pytest commands
docker-compose exec web python -m pytest -p no:warnings  # disable warnings
docker-compose exec web python -m pytest --lf  # run only the last failed tests
docker-compose exec web python -m pytest -k "summary and not test_read_summary"  # run only the tests with names that match the string expression
docker-compose exec web python -m pytest -x  # stop the test session after the first failure
docker-compose exec web python -m pytest -x --pdb  # enter PDB after first failure then end the test session
docker-compose exec web python -m pytest --maxfail=2  # stop the test run after two failures
docker-compose exec web python -m pytest -l  # show local variables in tracebacks
docker-compose exec web python -m pytest --durations=2  # list the 2 slowest tests
# test with coverage
docker-compose exec web python -m pytest --cov="."
docker-compose exec web python -m pytest --cov="." --cov-report html

# linting with flake8
docker-compose exec web flake8 .

# isort to sort our imports alphabetically and separate them into sections
docker-compose exec web isort . --check-only
docker-compose exec web isort . --diff
docker-compose exec web isort .
# code formatting with black, check how many files need formatting
docker-compose exec web black . --check
# check what would change
$ docker-compose exec web black . --diff
# do the actual formatting
docker-compose exec web black .
# Heroku deploy, create app:
heroku create
# log in to the Heroku Container Registry:
heroku container:login
# provision a new Postgres database with the hobby-dev plan:
heroku addons:create heroku-postgresql:hobby-dev --app thawing-ocean-75859
# build the production image and tag it with the following format:
#docker build --platform linux/amd64 -f project/Dockerfile.prod -t registry.heroku.com/thawing-ocean-75859/web ./project
docker buildx build --load --platform linux/amd64 -f project/Dockerfile.prod -t registry.heroku.com/thawing-ocean-75859/web ./project
# spin container to test locally
docker run --name fastapi-tdd -e PORT=8765 -e DATABASE_URL=sqlite://sqlite.db -p 5003:8765 registry.heroku.com/thawing-ocean-75859/web:latest
# test in
http://localhost:5003/ping/
# once done bring container down
docker rm fastapi-tdd -f
# push the image to the registry:
# docker push registry.heroku.com/thawing-ocean-75859/web:latest
docker push registry.heroku.com/thawing-ocean-75859/web:latest

# release the image - this will run the container. You should be able to view the app at heroku logs --tail.
heroku container:release web --app thawing-ocean-75859
# apply migrations
heroku run aerich upgrade --app thawing-ocean-75859
# see heroku logs
heroku logs --app=thawing-ocean-75859 --tail
# testing post endpoint:
http --json POST https://thawing-ocean-75859.herokuapp.com/summaries/ url=https://testdriven.io
